#n_res = n_res,
outcome = outcome,
X = X_obs),
#res_ind_start = res_ind_start,
#res_ind_end = res_ind_end),
chains = 4, cores = 4,
control = list(max_treedepth = 15))
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, 0, 0, # effects of fin measurements on score of each species
0, 1, 0,
0, 0, 1)*40, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(p, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Probability of outcome 1'),
yaxis = list(title = 'Probability of outcome 2'),
zaxis = list(title = 'Probability of outcome 3')))
# Then we fit the hierarchical model.
fit2 <- stan(file = "categorical_regression_hierarchical_noncentered.stan",
data = list(n_obs = n_obs,
n_cat = n_cat,
n_cov = n_cov,
#n_res = n_res,
outcome = outcome,
X = X_obs),
#res_ind_start = res_ind_start,
#res_ind_end = res_ind_end),
chains = 4, cores = 4,
control = list(max_treedepth = 15))
# Then we fit the hierarchical model.
fit2 <- stan(file = "categorical_regression_hierarchical_noncentered.stan",
data = list(n_obs = n_obs,
n_cat = n_cat,
n_cov = n_cov,
#n_res = n_res,
outcome = outcome,
X = X_obs),
#res_ind_start = res_ind_start,
#res_ind_end = res_ind_end),
chains = 4, cores = 4)
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, -10, -10, # effects of fin measurements on score of each species
-10, 1, -10,
-10, -10, 1), nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(p, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Probability of outcome 1'),
yaxis = list(title = 'Probability of outcome 2'),
zaxis = list(title = 'Probability of outcome 3')))
data.frame(cbind(p, paste("outcome", outcome, "occured")))
data.frame(cbind(X, paste("outcome", outcome, "occured")))
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, -10, -10, # effects of fin measurements on score of each species
-10, 1, -10,
-10, -10, 1)*10, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, -10, -10, # effects of fin measurements on score of each species
-10, 1, -10,
-10, -10, 1)*5, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
matrix(c(1,0,0), n_obs, n_cov)
X <- matrix(5 + runif(n_cov*n_obs), n_obs, n_cov) +
matrix(c(1,0,0), n_obs, n_cov)# fin measurements
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, -10, -10, # effects of fin measurements on score of each species
-10, 1, -10,
-10, -10, 1)*5, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, 0, 0, # effects of fin measurements on score of each species
0, 1, 1,
0, 0, 0)*5, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
X <- matrix(5 + runif(n_cov*n_obs), n_obs, n_cov) +
matrix(c(2,0,0), n_obs, n_cov)# fin measurements
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, 0, 0, # effects of fin measurements on score of each species
0, 1, 1,
0, 0, 0)*5, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
X <- matrix(5 + runif(n_cov*n_obs), n_obs, n_cov) +
matrix(c(1,0,0), n_obs, n_cov)# fin measurements
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(1, 0, 0, # effects of fin measurements on score of each species
0, 1, 0,
0, 0, 1)*5, nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(2, 0, 0, # effects of fin measurements on score of each species
0, 2, 0,
0, 0, 2), nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
# Next we need some way to convert those three fin measurements into a probability of
# each species. We do this by assigning a score to each category based on the
# values of the fin measurements, then those three scores are converting into probabilities
# of each species.
B <- matrix(c(4, 0, 0, # effects of fin measurements on score of each species
0, 4, 0,
0, 0, 4), nrow = n_cat, ncol = n_cov, byrow = TRUE)
score <- X %*% B
# Then we take those scores and convert them into probabilities using the softmax function.
# If you're familiar with logistic regression, this is just like using
# the inverse-logit function to transform the model's continuous predictions to lie on the [0,1]
# interval, except
# now we're using the softmax function because it can convert predictions with more than
# two categories. The softmax <wiki link> function is just <insert equation here>. In code
# that is
p <- exp(score)/rowSums(exp(score))
X2plot <- cbind(seq(4,7, l=100), rep(5.5, 100), rep(5.5, 100))
s2plot <- X2plot %*% B
p2plot <- exp(s2plot)/rowSums(exp(s2plot))
df2plot <-
data.frame(species1 = p2plot[,1],
species2 = p2plot[,2],
species3 = p2plot[,3] + 0.005,
cov1_val = seq(4,7, l=100)) %>%
tidyr::gather(species, probability, -cov1_val)
ggplot(data = df2plot, aes(x = cov1_val, y = probability, color = species)) +
geom_line() +
theme_bw() +
ylab("Probability of species") +
xlab("Dorsal fin length (cm)") +
theme(legend.title = element_blank())
# So each set of observations has a set of probabilities associated with describing which
# species the fish belongs to. The only thing to do now is simulate some outcomes given
# those probabilities.
outcome <- rep(NA, n_obs)
for (i in 1:n_obs) {
outcome[i] <- sample(1:n_cat, size = 1, prob = p[i,])
}
# Let's take a look at the outcomes that occured and their probabilities.
plot_ly(data = data.frame(cbind(X, paste("outcome", outcome, "occured"))),
x = ~X1, y = ~X2, z = ~X3,
color = ~X4) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Fin 1 length'),
yaxis = list(title = 'Fin 2 length'),
zaxis = list(title = 'Fin 3 length')))
# Distribution of mean errors with the actual mean errors of the 10 researchers.
sd_err <- 0.1
err <- matrix(data = rnorm(n_cov * n_obs, sd = sd_err), ncol = n_cov, nrow = n_obs)
# Next we calculate the observations with error and then calculate the probabilites of
# each outcome.
X_obs <- X + err# fin measurements with bias
# We can visualize the error by plotting the true covariate values against the observed
# values.
plot(as.vector(X), as.vector(X_obs), xlab = "True fin length", ylab = "Observed fin length")
# Then we fit the hierarchical model.
fit2 <- stan(file = "categorical_regression_hierarchical_noncentered.stan",
data = list(n_obs = n_obs,
n_cat = n_cat,
n_cov = n_cov,
#n_res = n_res,
outcome = outcome,
X = X_obs),
#res_ind_start = res_ind_start,
#res_ind_end = res_ind_end),
chains = 4, cores = 4)
