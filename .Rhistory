data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = . %>%
dplyr::filter(variable == "Year",
source == "observed")) +
theme_bw() +
theme(legend.title = element_blank())
# Plot estimated parameters vs true parameters
ar_sd <- sigma / (1 - phi^2)^0.5
df2plot <-
data.frame(variable = "b0",
tru = b0,
est = Report_sd_lmar$value["b0"],
ciu = Report_sd_lmar$value["b0"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"],
cil = Report_sd_lmar$value["b0"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"]) %>%
rbind(data.frame(variable = "b1",
tru = b1,
est = Report_sd_lmar$value["b1"],
ciu = Report_sd_lmar$value["b1"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"],
cil = Report_sd_lmar$value["b1"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"])) %>%
rbind(data.frame(variable = "phi",
tru = phi,
est = -0.5 * log(2/(Report_sd_lmar$value["unbounded_phi"]+1) - 1),
ciu = plogis(Report_sd_lmar$value["unbounded_phi"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]),
cil = plogis(Report_sd_lmar$value["unbounded_phi"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]))) %>%
rbind(data.frame(variable = "ar_sd",
tru = ar_sd,
est = exp(Report_sd_lmar$value["log_ar_sd"]),
ciu = exp(Report_sd_lmar$value["log_ar_sd"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"]),
cil = exp(Report_sd_lmar$value["log_ar_sd"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"])))
ggplot(df2plot, aes(y = variable)) +
geom_point( aes(x = tru), color = "red", size  = 3) +
geom_point( aes(x = est), color = "blue", size = 3) +
geom_errorbarh(aes(xmin = cil,
xmax = ciu), height = 0.1, color = "blue") +
theme_bw() +
ylab("") +
xlab("Value") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
View(df2plot)
Report_sd_lmar$value["unbounded_phi"]
2/(Report_sd_lmar$value["unbounded_phi"]+1)
2/(Report_sd_lmar$value["unbounded_phi"]+1) - 1
bound <- function(x) 2/(1 + exp(-2 * x)) - 1
bound(Report_sd_lmar$value["unbounded_phi"])
knitr::opts_chunk$set(echo = TRUE)
# load required libraries
library(ggplot2)
library(TMB)
library(dplyr)
set.seed(123) # for reproducibility
n_t <- 30 # length of time series
# Create trend
Year <- 1:n_t
b0 <- 1
b1 <- 0.1
trend <- b0 + b1 * Year
# Create errors
e <- vector(mode = "numeric", length = n_t) # vector for errors
sigma <- 1 # sd of white noise component
e[1] <- rnorm(1, sd = sigma) # error in first year
phi <- 0.9 # autocorrelation parameter
for (i in 2:n_t) e[i] <- phi * e[i-1] + rnorm(1, sd = sigma) # create errors
# Add errors to trend
Observation <- trend + e
# Plot it
ggplot(data.frame(Year = Year, Observation = Observation, trend = trend),
aes(x = Year)) +
geom_point(aes(y = Observation)) +
geom_line(aes(y = trend)) +
theme_bw() +
ylab("Observation") +
theme(axis.title = element_text(size = 14))
writeLines(readLines("lm_ar.cpp")[1:16])
writeLines(readLines("lm_ar.cpp")[17:19])
writeLines(readLines("lm_ar.cpp")[22:25])
writeLines(readLines("lm_ar.cpp")[28:30])
writeLines(readLines("lm_ar.cpp")[32:39])
# Compile model
compile("lm_ar.cpp")
# Build object
dyn.load(dynlib("lm_ar"))
Obj_lmar <- MakeADFun(data = list("x" = Year,
"y" = Observation),
parameters =  list("b0" = 0,
"b1" = 0,
"unbounded_phi" = 0,
"log_ar_sd" = 0))
Obj_lm <- MakeADFun(data = list("x" = Year,
"y" = Observation),
parameters =  list("b0" = 0,
"b1" = 0,
"unbounded_phi" = 0,
"log_ar_sd" = 0),
map = list("unbounded_phi" = factor(NA)))
# Optimize
Opt_lmar <- TMBhelper::Optimize(obj = Obj_lmar, newtonsteps = 1)
Opt_lm <- TMBhelper::Optimize(obj = Obj_lm, newtonsteps = 1)
# Report out the ADREPORT vars
Report_sd_lm <- TMB::sdreport(Obj_lm)
Report_sd_lmar <- TMB::sdreport(Obj_lmar)
# Plot predicted vs observed vs true
df2plot <-
rbind(data.frame(variable = names(Report_sd_lm$value),
value = Report_sd_lm$value,
sd = Report_sd_lm$sd,
source = "fit_lm"),
data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = . %>%
dplyr::filter(variable == "Year",
source == "observed")) +
theme_bw() +
theme(legend.title = element_blank())
# Plot estimated parameters vs true parameters
ar_sd <- sigma / (1 - phi^2)^0.5
bound <- function(x) 2/(1 + exp(-2 * x)) - 1
df2plot <-
data.frame(variable = "b0",
tru = b0,
est = Report_sd_lmar$value["b0"],
ciu = Report_sd_lmar$value["b0"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"],
cil = Report_sd_lmar$value["b0"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"]) %>%
rbind(data.frame(variable = "b1",
tru = b1,
est = Report_sd_lmar$value["b1"],
ciu = Report_sd_lmar$value["b1"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"],
cil = Report_sd_lmar$value["b1"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"])) %>%
rbind(data.frame(variable = "phi",
tru = phi,
est = bound(Report_sd_lmar$value["unbounded_phi"]),
ciu = bound(Report_sd_lmar$value["unbounded_phi"] +
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]),
cil = bound(Report_sd_lmar$value["unbounded_phi"] -
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]))) %>%
rbind(data.frame(variable = "ar_sd",
tru = ar_sd,
est = exp(Report_sd_lmar$value["log_ar_sd"]),
ciu = exp(Report_sd_lmar$value["log_ar_sd"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"]),
cil = exp(Report_sd_lmar$value["log_ar_sd"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"])))
ggplot(df2plot, aes(y = variable)) +
geom_point( aes(x = tru), color = "red", size  = 3) +
geom_point( aes(x = est), color = "blue", size = 3) +
geom_errorbarh(aes(xmin = cil,
xmax = ciu), height = 0.1, color = "blue") +
theme_bw() +
ylab("") +
xlab("Value") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
View(df2plot)
source('~/Desktop/schedule.R', echo=TRUE)
source('~/Desktop/schedule.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# load required libraries
library(ggplot2)
library(TMB)
library(dplyr)
set.seed(123) # for reproducibility
n_t <- 30 # length of time series
# Create trend
Year <- 1:n_t
b0 <- 1
b1 <- 0.1
trend <- b0 + b1 * Year
# Create errors
e <- vector(mode = "numeric", length = n_t) # vector for errors
sigma <- 1 # sd of white noise component
e[1] <- rnorm(1, sd = sigma) # error in first year
phi <- 0.9 # autocorrelation parameter
for (i in 2:n_t) e[i] <- phi * e[i-1] + rnorm(1, sd = sigma) # create errors
# Add errors to trend
Observation <- trend + e
# Plot it
ggplot(data.frame(Year = Year, Observation = Observation, trend = trend),
aes(x = Year)) +
geom_point(aes(y = Observation)) +
geom_line(aes(y = trend)) +
theme_bw() +
ylab("Observation") +
theme(axis.title = element_text(size = 14))
writeLines(readLines("lm_ar.cpp")[1:18])
writeLines(readLines("lm_ar.cpp")[25:28])
writeLines(readLines("lm_ar.cpp")[31:33])
writeLines(readLines("lm_ar.cpp")[35:43])
# Compile model
compile("lm_ar.cpp")
# Build object
dyn.load(dynlib("lm_ar"))
Obj_lmar <- MakeADFun(data = list("x" = Year, # regression with correlated residuals
"y" = Observation),
parameters =  list("b0" = 0,
"b1" = 0,
"unbounded_phi" = 0,
"log_ar_sd" = 0))
Obj_lm <- MakeADFun(data = list("x" = Year, # regression with correlated residuals
"y" = Observation),
parameters =  list("b0" = 0,
"b1" = 0,
"unbounded_phi" = 0,
"log_ar_sd" = 0),
map = list("unbounded_phi" = factor(NA)))
# Optimize
Opt_lmar <- TMBhelper::Optimize(obj = Obj_lmar, newtonsteps = 1)
Opt_lm <- TMBhelper::Optimize(obj = Obj_lm, newtonsteps = 1)
# Report out the ADREPORT vars
Report_sd_lm <- TMB::sdreport(Obj_lm)
Report_sd_lmar <- TMB::sdreport(Obj_lmar)
# Plot predicted vs observed vs true
df2plot <-
rbind(data.frame(variable = names(Report_sd_lm$value),
value = Report_sd_lm$value,
sd = Report_sd_lm$sd,
source = "fit_lm"),
data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = . %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = . %>%
dplyr::filter(variable == "Year",
source == "observed")) +
theme_bw() +
theme(legend.title = element_blank())
# Plot estimated parameters vs true parameters
ar_sd <- sigma / (1 - phi^2)^0.5
bound <- function(x) 2/(1 + exp(-2 * x)) - 1 # function to bound phi b/t -1 and 1
df2plot <-
data.frame(variable = "b0",
tru = b0,
est = Report_sd_lmar$value["b0"],
ciu = Report_sd_lmar$value["b0"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"],
cil = Report_sd_lmar$value["b0"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"]) %>%
rbind(data.frame(variable = "b1",
tru = b1,
est = Report_sd_lmar$value["b1"],
ciu = Report_sd_lmar$value["b1"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"],
cil = Report_sd_lmar$value["b1"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"])) %>%
rbind(data.frame(variable = "phi",
tru = phi,
est = bound(Report_sd_lmar$value["unbounded_phi"]),
ciu = bound(Report_sd_lmar$value["unbounded_phi"] +
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]),
cil = bound(Report_sd_lmar$value["unbounded_phi"] -
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]))) %>%
rbind(data.frame(variable = "ar_sd",
tru = ar_sd,
est = exp(Report_sd_lmar$value["log_ar_sd"]),
ciu = exp(Report_sd_lmar$value["log_ar_sd"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"]),
cil = exp(Report_sd_lmar$value["log_ar_sd"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"])))
ggplot(df2plot, aes(y = variable)) +
geom_point( aes(x = tru), color = "red", size  = 3) +
geom_point( aes(x = est), color = "blue", size = 3) +
geom_errorbarh(aes(xmin = cil,
xmax = ciu), height = 0.1, color = "blue") +
theme_bw() +
ylab("") +
xlab("Value") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
df2plot <-
rbind(data.frame(variable = names(Report_sd_lm$value),
value = Report_sd_lm$value,
sd = Report_sd_lm$sd,
source = "fit_lm"),
data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
View(df2plot)
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = df2plot %>%
dplyr::filter(variable == "Year",
source == "observed")) +
theme_bw() +
theme(legend.title = element_blank())
# Plot predicted vs observed vs true
df2plot <-
rbind(data.frame(variable = names(Report_sd_lm$value),
value = Report_sd_lm$value,
sd = Report_sd_lm$sd,
source = "fit_lm"),
data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = df2plot %>%
dplyr::filter(variable == "Year",
source == "observed")) +
theme_bw() +
theme(legend.title = element_blank())
# Plot estimated parameters vs true parameters
ar_sd <- sigma / (1 - phi^2)^0.5
bound <- function(x) 2/(1 + exp(-2 * x)) - 1 # function to bound phi b/t -1 and 1
df2plot <-
data.frame(variable = "b0",
tru = b0,
est = Report_sd_lmar$value["b0"],
ciu = Report_sd_lmar$value["b0"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"],
cil = Report_sd_lmar$value["b0"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b0"]) %>%
rbind(data.frame(variable = "b1",
tru = b1,
est = Report_sd_lmar$value["b1"],
ciu = Report_sd_lmar$value["b1"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"],
cil = Report_sd_lmar$value["b1"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "b1"])) %>%
rbind(data.frame(variable = "phi",
tru = phi,
est = bound(Report_sd_lmar$value["unbounded_phi"]),
ciu = bound(Report_sd_lmar$value["unbounded_phi"] +
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]),
cil = bound(Report_sd_lmar$value["unbounded_phi"] -
1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "unbounded_phi"]))) %>%
rbind(data.frame(variable = "ar_sd",
tru = ar_sd,
est = exp(Report_sd_lmar$value["log_ar_sd"]),
ciu = exp(Report_sd_lmar$value["log_ar_sd"] + 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"]),
cil = exp(Report_sd_lmar$value["log_ar_sd"] - 1.96 * Report_sd_lmar$sd[names(Report_sd_lmar$value) == "log_ar_sd"])))
ggplot(df2plot, aes(y = variable)) +
geom_point( aes(x = tru), color = "red", size  = 3) +
geom_point( aes(x = est), color = "blue", size = 3) +
geom_errorbarh(aes(xmin = cil,
xmax = ciu), height = 0.1, color = "blue") +
theme_bw() +
ylab("") +
xlab("Value") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
df2plot <-
rbind(data.frame(variable = names(Report_sd_lm$value),
value = Report_sd_lm$value,
sd = Report_sd_lm$sd,
source = "fit_lm"),
data.frame(variable = names(Report_sd_lmar$value),
value = Report_sd_lmar$value,
sd = Report_sd_lmar$sd,
source = "fit_lmar")) %>%
dplyr::mutate(variable = ifelse(variable == "fit_y",
"trend",
as.character(variable))) %>%
dplyr::filter(variable == "trend") %>%
rbind(data.frame(variable = rep(c("trend"), each = length(trend)),
value = trend,
sd = NA,
source = "true")) %>%
rbind(data.frame(variable = "Observation",
value = Observation,
sd = NA,
source = "observed")) %>%
dplyr::mutate(Year = rep(Year, 4))
View(df2plot)
df2plot %>%
dplyr::filter(variable == "Year",
source == "observed")
df2plot %>%
dplyr::filter(variable == "Year",
source == "observed")
# Plot estimated trend vs true trend
ggplot(df2plot,
aes(x = Year, y = value)) +
geom_line(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(color = source)) +
geom_ribbon(data = df2plot %>%
dplyr::filter(variable == "trend") %>%
dplyr::filter(source %in% c("fit_lm", "fit_lmar", "true")),
aes(ymin = value - 1.96*sd,
ymax = value + 1.96*sd,
fill = source),
alpha = 0.2) +
geom_point(data = df2plot %>%
dplyr::filter(variable == "Observation")) +
theme_bw() +
theme(legend.title = element_blank())
